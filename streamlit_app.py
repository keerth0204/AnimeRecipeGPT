#Import packages
import streamlit as st
import pandas as pd
from dotenv import dotenv_values
import json
import requests
from langchain.prompts import PromptTemplate
from langchain.llms import OpenAI
from langchain.schema import StrOutputParser
from openai import OpenAI as AI

#Import or define your constants
config = dotenv_values(".env")
OPENAI_API_KEY = config["OPENAI_API_KEY"]
EDAMAM_API_ID = config["EDAMAM_APP_ID"]
EDAMAM_APP_KEY = config["EDAMAM_APP_KEY"]
api_endpoint = 'https://api.edamam.com/api/nutrition-details'

#Function that fetches Nutrition Information
def get_edamam_analysis(details, anime_details):
     
     url = api_endpoint + '?app_id=' + EDAMAM_API_ID + '&app_key=' + EDAMAM_APP_KEY
     headers = {'Content-Type' : 'application/json'}
     parameters = {
          'title':anime_details['Dish'],
          'ingr':details['Ingredients']}
    
     post_response = requests.post(url=url, json=parameters, headers=headers)
     #st.info(post_response.status_code)

     response_info = post_response.json()
     nutrients = pd.DataFrame(response_info['totalNutrients']).transpose()
     nutrients = nutrients.reset_index()

     with st.sidebar.expander('Nutrition breakdown'):
          st.table(nutrients.drop(['index'], axis=1))

#Function to create a DALL-e image
def create_image(response):
    
    dish = response['Dish']
    anime = response['Anime']
    client = AI(api_key=OPENAI_API_KEY)
    prompt = f'Create anime an image of the dish {dish} from the anime {anime}'
    image_parameters = {
        "prompt": prompt,
        "n": 1}
    img_response = client.images.generate(**image_parameters)
    generated_image_url = img_response.data[0].url
    return generated_image_url

#Setting up UI based on the anime details returned from the prompt
def anime_ui(details):
      
      st.markdown(f""" <p style="font-family: Georgia, serif;font-size:20px;"> {details['Greeting']} </p>""", unsafe_allow_html=True)
      st.markdown(f""" <p style="font-family: Georgia, serif;font-size:20px;">Introducing... <span style="font-size:36px">{details['Dish']}</span> </p>""", unsafe_allow_html=True)
      st.markdown(f""" <p style="font-family: Georgia, serif;font-size:20px;">From the anime - <span style="font-size:36px">{details['Anime']}</span> </p>""", unsafe_allow_html=True)
      st.markdown(f""" <p style="font-family: Georgia, serif;font-size:20px;"><span style="color: rgba(255, 255, 255, 0.5)">A little about the anime:</span> {details['Summary']} </p>""", unsafe_allow_html=True)

#Setting up UI for ingredients based on the list generated by the prompt
def ingredients_ui(details, anime_info):

     with st.sidebar:
          st.markdown(f"""<p style="font-family: Georgia, serif;font-size:36px;">Ingredients:</p>""", unsafe_allow_html=True)
          for i in details['Ingredients']:
               st.markdown(f"""<p style="font-family: Georgia, serif;font-size:20px;">âœ¨ {i} </p>""", unsafe_allow_html=True)
          st.divider()
          get_edamam_analysis(details, anime_info)

#Setting up UI for prepartion steps generated by the prompt
def preparation_ui(details, anime_info):

     dish = anime_info['Dish']
     st.divider()
     url = create_image(anime_info) 
     st.image(url, caption=f'{dish}')
     st.markdown(f""" <p style="font-family: Georgia, serif;font-size:36px;">Preparation</p>""", unsafe_allow_html=True)
     for i in details["Preparation"]:
          st.markdown(f"""<p style="font-family: Georgia, serif;font-size:20px;">âœ¨ {i} </p>""", unsafe_allow_html=True)

#Function to generate    
def generate_response(query):
    
    #Engineer a prompt to return information on anime, anime summary, anime dish, and a greeting in JSON format 
    anime_prompt = PromptTemplate.from_template(
        """ You are an Otaku who loves to cook anime insipred dishes.
        User request: {query}
        Otaku: Suggest only the dish name, the anime it is from, a short summary on the anime (using text and emojis), and greet the user using funny anime terms telling them how rich animes are with food, based on the request above in json format like -
         "Greeting":
         "Dish":
         "Anime":
         "Summary": """
    )

    #Engineer a prompt to return ingredients as a list in JSON format 
    ingredients_prompt = PromptTemplate.from_template(
          """You are an Otaku who loves to cook anime insipred dishes
          User request: {dish} from anime {anime}
          Otaku: Give ingredients and their measurements eclosed in double quotes and separated using commas as a numbered list, for the request above. Respond in json format using key -
           "Ingredients": [] 
           
           Here is an example for more context:
            "Ingredients": ["1 cup of all-purpose flour", "2 tablespoons of baking powder", "2 tablespoons of sugar"] """
    ) 
    
    #Engineer a prompt to return preparation steps as a list in JSON format
    prep_prompt = PromptTemplate.from_template(
          """You are an Otaku who loves to cook anime insipred dishes
          User request: {dish} from anime {anime}
          Otaku: Give numbered preparation steps in a list, for the request above under 1000 tokens. Respond in json format using key -
           "Preparation": [] """
    )
    
    #Retrieve responses from openai from this section
    #Initialize LLM
    model = OpenAI(openai_api_key=OPENAI_API_KEY,temperature=0)

    #Chain prompt, model and parser
    #Anime details
    anime_chain = anime_prompt|model|StrOutputParser()
    anime_prompt_response = anime_chain.invoke({'query': query})
    if anime_prompt_response:
      anime_details = json.loads(anime_prompt_response)
      anime_ui(anime_details)

    #Ingredients
    ingredients_chain = ingredients_prompt|model|StrOutputParser()
    ingredients_prompt_response = ingredients_chain.invoke({'dish': anime_details['Dish'], 'anime': anime_details['Anime']})
    if ingredients_prompt_response:
      ingredient_details = json.loads(ingredients_prompt_response)
      ingredients_ui(ingredient_details, anime_details)

    #Preparation       
    prep_chain = prep_prompt|model|StrOutputParser()
    prep_prompt_response = prep_chain.invoke({'dish': anime_details['Dish'], 'anime': anime_details['Anime']})
    if prep_prompt_response:
      prep_details = json.loads(prep_prompt_response)
      preparation_ui(prep_details, anime_details)

#Flow starts from here
st.title('ðŸ¦œðŸ”— Anime Recipes')
with st.form('form-1'):
     user_text = st.text_input('Ask for a Recipe below...','Give me a nutritional breakfast recipe')
     submitted = st.form_submit_button('Submit')
if submitted:
     generate_response(user_text)